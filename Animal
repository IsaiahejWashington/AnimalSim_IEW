
	import java.util.Random;
//import CustomExceptions.InvalidSimIDException;

public abstract class Animal extends CustomExceptions {
	
	protected int simID;
	protected Location location;
	protected boolean full;
	protected boolean rested;
	
	
	
	public Animal() {
		simID = 0;
		location = new Location(0, 0);//why is there an error message here?
		full = false;
		rested = true;
		
	}//end-empty argument constructor
	
	public Animal(int simID, Location location) {
		this.simID = simID;
		this.location = location;
		this.full = false;
		this.rested = true;
		
	}//end preferred argument constructor
	
	public boolean eat() {
		Random r = new Random();
		if(r.nextFloat()<=0.5) {
		full = false;
	}
		else {
			full = true;
		}
		return full;		
	}//end eat boolean
	
	public boolean sleep() {
		Random r = new Random();
		if (r.nextFloat()<=0.5) {
			rested = false;
		}
		else {
			rested = true;
		}
		return rested;	
	}//end sleep boolean

	public int getSimID() {
		return simID;
	}//end getSimId

	 public void setSimID(int simID) throws InvalidSimIDException {
	        if (simID < 0) {
	            throw new InvalidSimIDException("SimID cannot be less than 0.");
	        }
	        this.simID = simID;
	    }//end setSimID
	

	public Location getLocation() {
		return location;
	}//end GetLocation

	public void setLocation(int location) {
		this.location = getLocation();
	}//end setLocation

	public boolean isFull() {
		return full;
	}//end isFull

	public void setFull(boolean full) {
		this.full = full;
	}//end setFull

	public boolean isRested() {
		return rested;
	}//end isRested

	public void setRested(boolean rested) {
		this.rested = rested;
	}//end setRested

	@Override
	public String toString() {
		return "Animal [simID=" + simID + ", location=" + location + ", full=" + full + ", rested=" + rested + "]";
	}//end toString
	
	

	
}//end class
